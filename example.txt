LOGGER SUCCESSFULLY CLEARED!!!

LOG 1: METHOD CALL: add()
LOG 2: INSIDE add() METHOD
***THE METHOD WORKS LIKE THIS***
	- IT CREATES VECTOR OF STRINGS TO HOLD THE PROMPTS(firstname, middlename, ...) 
		AND ANOTHER VECTOR TO HOLD PATIENT-INFO
	- THEN IT ITERATES THROUGH THAT VECTOR OF PROMPTS, PROMPTING THE USER TO GIVE AN ANSWER TO THE PROMPT
	- IT THEN TAKES THE PROMPT ADDS IN A ':' AND THEN ADDS THE ANSWER TO CREATE A SINGLE STRING
	- STRING IS PASSED INTO PATIENT-INFO VECTOR
***STEPS***
LOG 3: 	* ASK USER FOR PATIENT INFORMATION
LOG 4: 	* FOR EACH PROMPT
LOG 5: 	* IF PROMPT IS 'AILMENT'
			>> ASK USER TO INPUT NUMBER OF AILMENTS,
			>> ENTER ANOTHER FOR LOOP TILL NO_OF_AILMENTS IS REACHED,
			>> EACH TIME TAKE IN AILMENT AS STRING AND PUSH BACK TO PATIENT-INFO VECTOR.
LOG 6: 	* ELSE
			>> ASK USER TO INPUT ANSWER OF PROMPT,
			>> TAKE ANSWER AND PUSHBACK AFTER CONCATENATING IT WITH PROMPT AND ':' 

LOG 1: METHOD CALL: addFromFile()
LOG 2: INSIDE addFromFile() METHOD:
LOG 3: 	* GET FILENAME FROM USER
LOG 4: 	* PASS FILENAME TO THE ifstream() METHOD
LOG 5: 	* CREATE VECTOR OF STRINGS TO HOLD PATIENT INFORMATION AS STRING
LOG 6: 	* WHILE (CHECK FOR SUCCESS OF getline(...)) THE RETURN TYPE IS CONVERTED TO BOOL BY IMPLICIT CONVERSION
			>> READ A LINE USING GETLINE AND STORE IN STRING 'X'
			>> IF EMPTY LINE IS READ OR EOF:
				THEN CREATE A NEW PATIENT WITH THE VECTOR AND PASS THAT INTO THE GLOBAL PATIENT LIST

LOG 1: METHOD CALL: treat()
LOG 2: INSIDE treat() METHOD:
LOG 3: 	* CATCH ERROR IF QUEUE IS EMPTY
LOG 4: 	* SLEEP FOR SOME SECONDS
LOG 5: 	* GET THE PATIENT ON TOP AND set Treated to '1' 
LOG 6: 	* ADD PATIENT TO TREATED * POP PATIENT


LOG 1: METHOD CALL: patientReport()
LOG 2: INSIDE patientReport() METHOD:
LOG 3: 	* CATCH ERROR IF QUEUE IS EMPTY
LOG 4: 	* COPY PATIENT LIST
LOG 5: 	* ASK FOR FULL NAME OF PATIENT THAT THE USER WANTS A REPORT OF (OFC USE A FOR LOOP TO BE FANCY)
LOG 6: 	* GET THE FULL NAME OF PATIENT AT THE TOP OF QUEUE
LOG 7: 	* WHILE(INPUT_NAME != QUEUE.TOP()_NAME) 
			>> POP PATIENT FROM COPY QUEUE
			>> GET THE FULL NAME OF PATIENT AT THE TOP OF QUEUE
LOG 8: 	* OUTSIDE WHILE() LOOP:
LOG 9: 	* IF QUEUE IS EMPTY
		THEN TELL USER THERE IS NO PATIENT WITH THAT NAME
LOG 10: * ELSE
		COUT << PATIENT NAME (FLEX A BIT HERE WITH THE PRINTING)


LOG 1: METHOD CALL: allPatientsReport()
LOG 2: INSIDE allPatientsReport() METHOD:
LOG 3: 	* CATCH ERROR IF QUEUE IS EMPTY
LOG 4: 	* COPY PATIENT LIST
LOG 5: 	* ASK USER FOR CONSOLE/FILE OUTPUT
LOG 6: 	* IF CONSOLE
	** WHILE COPY_QUEUE IS NOT EMPTY
		>> GET TOP PATIENT, CALL 'toString' ON IT(FOR FANCY PRINT) AND COUT
		>> POP PATIENT
LOG 7: 	* ELSE
	** ASK FOR FILE PATH AND OPEN FILE
	** WHILE COPY_QUEUE IS NOT EMPTY
		>> GET TOP PATIENT, CALL 'toString' ON IT(FOR FANCY PRINT) AND OUTSTREAM TO FILE
		>> POP PATIENT

LOG 1: METHOD CALL: treatedPatientsReport()
LOG 2: INSIDE treatedPatientsReport() METHOD:
LOG 3: 	* CATCH ERROR IF QUEUE IS EMPTY
LOG 4: 	* COPY PATIENT LIST
LOG 5: 	* ASK USER FOR CONSOLE/FILE OUTPUT
LOG 6: 	* IF CONSOLE
	** WHILE COPY_QUEUE IS NOT EMPTY
		>> GET TOP PATIENT, CALL 'toString' ON IT(FOR FANCY PRINT) AND COUT
		>> POP PATIENT
LOG 7: 	* ELSE
	** ASK FOR FILE PATH AND OPEN FILE
	** WHILE COPY_QUEUE IS NOT EMPTY
		>> GET TOP PATIENT, CALL 'toString' ON IT(FOR FANCY PRINT) AND OUTSTREAM TO FILE
		>> POP PATIENT

LOG 1: METHOD CALL: treat()
LOG 2: INSIDE treat() METHOD:
LOG 3: 	* CATCH ERROR IF QUEUE IS EMPTY
LOG 4: 	* COPY PATIENT-TRIAGE
LOG 5: 	* GET TRIAGE.TOP() AND COUT WITH 'toString'
LOG 6: 	* POP PATIENT


LOG 1: METHOD CALL: treatAll()
LOG 2: INSIDE treatAll() METHOD:
LOG 3: 	* CATCH ERROR IF QUEUE IS EMPTY
LOG 4: 	* WHILE(GLOBAL PATIENT LIST IS NOT EMPTY)
		>> SLEEP FOR SOME SECONDS
		>> GET THE PATIENT ON TOP AND set Treated to '1'
		>> PUSH THE TOP PATIENT ONTO GLOBAL TREATED QUEUE
		>>  POP PATIENT


LOG 1: METHOD CALL: printByDoc()
LOG 2: INSIDE printByDoc() METHOD:
LOG 3: 	* CATCH ERROR IF QUEUE IS EMPTY
LOG 4: 	* CREATE A list<vector<string>> TO HOLD DOCTOR NAMES AND A vector<Patient> TO HOLD ALL PATIENT INFO
	* WHILE(PQ OF PATIENT LIST NOT EMPTY)
			>> ADD DOCTOR NAME TO list<vector<string> AND PATIENT INFO TO vector<Patient>
			>> POP PATIENT FROM PQ
LOG 5: 	* ORDER LIST BY DOC NAME WITH A FUNCTOR
LOG 6: 	* CALL THE SORT() METHOD ON LIST WITH BINARY PREDICATE WE DEFINED
LOG 7: 	* CALL THE unique() METHOD ON LIST WITH BINARY PREDICATE WE DEFINED
LOG 8: 	* INSIDE FOR LOOP THAT RUNS FROM list.begin till list.end WITH AN ITERATOR
			>> GET NAME OF DOCTOR FOR THE ITERATOR AND SAVE TO STRING 'doc' FOR INSTANCE
			>> INSIDE SECOND FOR EACH LOOP
				- IF DOC OF PATIENT IS SAME AS STRING 'doc'
					> THEN PUSHBACK PATIENT.TOSTRING TO THIS DOCTOR'S VECTOR
LOG 9: 	* WHEN DONE PRINT EVERYTHING WITH A FOR EACH
